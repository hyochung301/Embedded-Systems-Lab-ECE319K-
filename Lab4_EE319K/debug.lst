


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** Debug.s ***************
    2 00000000         ; Program written by: **-UUU-*Hyokwon Chung**Garrett Wil
                       liams***
    3 00000000         ; Date Created: 09/04/2022
    4 00000000         ; Last Modified: 09/22/2022
    5 00000000         
    6 00000000         ; You may assume your debug functions have exclusive acc
                       ess to SysTick
    7 00000000         ; However, please make your PortF initialization/access 
                       friendly,
    8 00000000         ; because you have exclusive access to only one of the P
                       ortF pins.
    9 00000000         
   10 00000000         ; Your Debug_Init should initialize all your debug funct
                       ionality
   11 00000000         ; Everyone writes the same version of Debug_ElapsedTime
   12 00000000         ; Everyone writes Debug_Beat, but the pin to toggle is r
                       evealed in the UART window
   13 00000000         ; There are four possible versions of Debug_Dump. 
   14 00000000         ; Which version you implement is revealed in the UART wi
                       ndow
   15 00000000         
   16 00000000         ; ****************Option 0******************
   17 00000000         ; This is the first of four possible options
   18 00000000         ; Input: R0 is the data be 8-bit strategic information 
   19 00000000         ; Output: none
   20 00000000         ; Dump R0 into an array if this value is different from 
                       the previous value
   21 00000000         ; Please Dump R0 on the first call
   22 00000000         
   23 00000000         ; ****************Option 1******************
   24 00000000         ; This is the second of four possible options
   25 00000000         ; Input: R0 7-bit strategic information 
   26 00000000         ; Output: none
   27 00000000         ; If R0 bit 6 is low, 
   28 00000000         ; - observe the value in bits 5-0 of R0 (value from 0 to
                        63): 
   29 00000000         ;     maintain a histogram recording the number of times
                        each value as occurred
   30 00000000         ;     since N will be less than 200, no histogram count 
                       can exceed the 8-bit 255 maximum,  
   31 00000000         ; If R0 bit 6 is high,
   32 00000000         ; - Do nothing
   33 00000000         
   34 00000000         ; ****************Option 2******************
   35 00000000         ; This is the third of four possible options
   36 00000000         ; Input: R0 is the data be 8-bit strategic information 
   37 00000000         ; Output: none 
   38 00000000         ; Dump R0 into an array if R0 bit 6 is low and bit 0 is 
                       high
   39 00000000         
   40 00000000         ; ****************Option 3******************
   41 00000000         ; This is the fourth of four possible options
   42 00000000         ; Input: R0 7-bit strategic information 
   43 00000000         ; Output: none
   44 00000000         ; - calculate the absolute value difference between this
                        value and the value at the previous call to Debug_Dump
   45 00000000         ;     for the first call to Dump_Dump, assume the previo
                       us value was 0



ARM Macro Assembler    Page 2 


   46 00000000         ;     the differences will range from 0 to 63
   47 00000000         ;     maintain a histogram recording the number of times
                        each difference as occurred
   48 00000000         ;     since N will be less than 200, no histogram count 
                       can exceed the 8-bit 255 maximum,  
   49 00000000         
   50 00000000         
   51 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   52 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   53 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   54 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   55 00000000 400FE604 
                       SYSCTL_RCGCTIMER_R
                               EQU              0x400FE604
   56 00000000 40032000 
                       TIMER2_CFG_R
                               EQU              0x40032000
   57 00000000 40032004 
                       TIMER2_TAMR_R
                               EQU              0x40032004
   58 00000000 4003200C 
                       TIMER2_CTL_R
                               EQU              0x4003200C
   59 00000000 40032018 
                       TIMER2_IMR_R
                               EQU              0x40032018
   60 00000000 40032028 
                       TIMER2_TAILR_R
                               EQU              0x40032028
   61 00000000 40032038 
                       TIMER2_TAPR_R
                               EQU              0x40032038
   62 00000000 40032048 
                       TIMER2_TAR_R
                               EQU              0x40032048
   63 00000000         
   64 00000000         ; RAM Area
   65 00000000                 AREA             DATA, ALIGN=2
   66 00000000         ;place your debug variables in RAM here
   67 00000000                 EXPORT           DumpBuf
   68 00000000                 EXPORT           Histogram
   69 00000000                 EXPORT           MinimumTime
   70 00000000                 EXPORT           MaximumTime
   71 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    DumpBuf SPACE            200         ; 200 8-bit I/O val



ARM Macro Assembler    Page 4 


                                                            ues, your N will be
                                                             less than 200
   72 000000C8 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       Histogram
                               SPACE            64          ; count of the numb
                                                            er of times each va
                                                            lue has occured
   73 00000108 00 00 00 
              00       MinimumTime
                               SPACE            4           ; smallest elapsed 
                                                            time between called
                                                             to Debug_ElapsedTi
                                                            me
   74 0000010C 00 00 00 
              00       MaximumTime
                               SPACE            4           ; largest elapsed t
                                                            ime between called 
                                                            to Debug_ElapsedTim
                                                            e
   75 00000110         ; you will need additional globals, but do not change th
                       e above definitions
   76 00000110 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       NTH     SPACE            172
   77 000001BC 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 6 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    NST     SPACE            200
   78 00000284 00 00 00 
              00       LastTime
                               SPACE            4
   79 00000288 00 00 00 
              00       NowTime SPACE            4
   80 0000028C         ; ROM Area
   81 0000028C                 EXPORT           Debug_Init
   82 0000028C                 EXPORT           Debug_Dump
   83 0000028C                 EXPORT           Debug_ElapsedTime
   84 0000028C                 EXPORT           Debug_Beat
   85 0000028C         ;-UUU-Import routine(s) from other assembly files (like 



ARM Macro Assembler    Page 7 


                       SysTick.s) here
   86 0000028C                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   87 00000000                 THUMB
   88 00000000                 EXPORT           EID1
   89 00000000 68 63 32 
              37 34 32 
              36 00    EID1    DCB              "hc27426",0 ;replace ABC123 wit
                                                            h your EID
   90 00000008                 EXPORT           EID2
   91 00000008 67 61 77 
              32 33 32 
              32 00    EID2    DCB              "gaw2322",0 ;replace ABC123 wit
                                                            h your EID
   92 00000010         ;---------------Your code for Lab 4----------------
   93 00000010         ;Debug initialization for all your debug routines
   94 00000010         ;This is called once by the Lab4 grader to assign points
                        (if you pass #2 into TExaS_Init
   95 00000010         ;It is later called at the beginning of the main.s
   96 00000010         ;for options 0 and 2, place 0xFF into each element of Du
                       mpBuf
   97 00000010         ;for options 1 and 3, place 0 into each element of Histo
                       gram
   98 00000010         ; save all registers (not just R4-R11)
   99 00000010         ; you will need to initialize global variables, Timer2 a
                       nd Port F here
  100 00000010         Debug_Init
  101 00000010 B507            PUSH             {R0,R1,R2,LR}
  102 00000012         
  103 00000012 F000 F898       BL               Timer2_Init ;TIMER2_TAR_R is 32
                                                            -bit down counter
  104 00000016         ;you write this
  105 00000016 E92D 1FFF       PUSH             {R0-R12}
  106 0000001A         
  107 0000001A 485C            LDR              R0, = SYSCTL_RCGCGPIO_R
  108 0000001C 7801            LDRB             R1, [R0]
  109 0000001E F041 0120       ORR              R1, #0x20   ; enable Port E clo
                                                            ck
  110 00000022 7001            STRB             R1, [R0]
  111 00000024 BF00            NOP
  112 00000026 BF00            NOP
  113 00000028         ;Define direction(out) output 1(Led)
  114 00000028 4859            LDR              R0, =GPIO_PORTF_DIR_R
  115 0000002A 6801            LDR              R1, [R0]
  116 0000002C F041 0102       ORR              R1, #0x02   ; set output bits t
                                                            o 1
  117 00000030 6001            STR              R1, [R0]    ;
  118 00000032         ;DIGITAL ENABLE FOR TURNING ON 
  119 00000032 4858            LDR              R0, =GPIO_PORTF_DEN_R ;READ
  120 00000034 7801            LDRB             R1, [R0]
  121 00000036 F041 0102       ORR              R1, #0x02   ;MODIFY TURN ON PF 
                                                            1
  122 0000003A 7001            STRB             R1, [R0]    ; WRITE
  123 0000003C         
  124 0000003C 4856            LDR              R0, =NTH
  125 0000003E 6801            LDR              R1, [R0]
  126 00000040 F001 0100       AND              R1, #0x00
  127 00000044 6001            STR              R1, [R0]
  128 00000046         ;filling 0



ARM Macro Assembler    Page 8 


  129 00000046 4854            LDR              R0, =NTH
  130 00000048 6801            LDR              R1, [R0]
  131 0000004A F001 0100       AND              R1, #0
  132 0000004E 6001            STR              R1, [R0]
  133 00000050         
  134 00000050 4852            LDR              R0, =NST
  135 00000052 6801            LDR              R1, [R0]
  136 00000054 F001 0100       AND              R1, #0
  137 00000058 6001            STR              R1, [R0]
  138 0000005A         
  139 0000005A 4851            LDR              R0, =LastTime
  140 0000005C 6801            LDR              R1, [R0]
  141 0000005E F001 0100       AND              R1, #0
  142 00000062 6001            STR              R1, [R0]
  143 00000064         
  144 00000064 484F            LDR              R0, =NowTime
  145 00000066 6801            LDR              R1, [R0]
  146 00000068 F001 0100       AND              R1, #0
  147 0000006C 6001            STR              R1, [R0]
  148 0000006E         
  149 0000006E 484E            LDR              R0, =MaximumTime
  150 00000070 6801            LDR              R1, [R0]
  151 00000072 F001 0100       AND              R1, #0
  152 00000076 6001            STR              R1, [R0]
  153 00000078         
  154 00000078 484C            LDR              R0, =MinimumTime
  155 0000007A 6801            LDR              R1, [R0]
  156 0000007C F041 31FF       ORR              R1, #0xFFFFFFFF
  157 00000080 6001            STR              R1, [R0]
  158 00000082         
  159 00000082         ;putting 0xFF into all the other elements
  160 00000082 F04F 02C8       MOV              R2, #200
  161 00000086 484A            LDR              R0, =DumpBuf
  162 00000088 6801    NX1     LDR              R1, [R0]
  163 0000008A F04F 01FF       MOV              R1, #0xFF
  164 0000008E 7001            STRB             R1, [R0]
  165 00000090 3A01            SUBS             R2, #1
  166 00000092 D002            BEQ              DINI
  167 00000094 F100 0001       ADD              R0, R0, #1
  168 00000098 E7F6            B                NX1
  169 0000009A         
  170 0000009A         
  171 0000009A         
  172 0000009A         
  173 0000009A         
  174 0000009A E8BD 1FFF 
                       DINI    POP              {R0-R12}
  175 0000009E         
  176 0000009E BD07            POP              {R0,R1,R2,PC}
  177 000000A0         
  178 000000A0         ; There are four possible options: 0,1,2 or 3
  179 000000A0         ; Debug_Dump is called after every output.
  180 000000A0         ; Stop recording and measuring after N observations
  181 000000A0         ; Don't stop after N calls to Debug_Dump, but stop after
                        N changes to your data structures
  182 000000A0         ; N will be revealed to you in the UART window)
  183 000000A0         ; Save all registers (not just R4-R11)
  184 000000A0         
  185 000000A0         Debug_Dump



ARM Macro Assembler    Page 9 


  186 000000A0 B51F            PUSH             {R0-R4,LR}
  187 000000A2 E92D 1FFF       PUSH             {R0-R12}
  188 000000A6         ;you write this
  189 000000A6         ;assume capture is called about every 2.5ms (real board)
                       
  190 000000A6         ;Let M = number of instructions in your Debug_Dump
  191 000000A6         ;Calculate T = M instructions * 2cycles/instruction * 12
                       .5ns/cycle 
  192 000000A6         ;Calculate intrusiveness is T/2.5ms = ???
  193 000000A6         
  194 000000A6         
  195 000000A6 4E3D            LDR              R6, =NST    ; Getting the NST(G
                                                            lobal counter of Nt
                                                            h stored.)
  196 000000A8 6837            LDR              R7, [R6]    ; get the NST (how 
                                                            many times it has b
                                                            een stored)
  197 000000AA F04F 03AC       MOV              R3, #172    ; Set counter for c
                                                            omparison in R3
  198 000000AE 429F            CMP              R7, R3      ; Skip dump if 172 
                                                            has been stored. 
  199 000000B0 D00A            BEQ              DUSKIP      ; skip dump
  200 000000B2         ; proceed to dump if branch is not taken
  201 000000B2 4601            MOV              R1, R0
  202 000000B4 F021 01BE       BIC              R1, #0xBE   ; Isolate bits 0 an
                                                            d 6 ; 
  203 000000B8         
  204 000000B8         
  205 000000B8         
  206 000000B8         ;Compare R0 bits with R1 bits
  207 000000B8 2901            CMP              R1, #0x01   ; determine if the 
                                                            value is odd
  208 000000BA D105            BNE              DUSKIP      ; branch to end of 
                                                            dump if not odd
  209 000000BC         
  210 000000BC 4C3C            LDR              R4, =DumpBuf ; load DumpBuf2 ar
                                                            ray into register
  211 000000BE         
  212 000000BE 443C            ADD              R4, R4, R7  ; Get the Nth value
                                                             of the array 
  213 000000C0 7020            STRB             R0, [R4]    ;Store the value of
                                                             the Nth variable 
  214 000000C2 F107 0701       ADD              R7, R7, #0x01 ; increment count
                                                            er for how many tim
                                                            es it has been stor
                                                            ed
  215 000000C6 6037            STR              R7, [R6]
  216 000000C8         ; end of dump, proceed to pop
  217 000000C8         
  218 000000C8 E8BD 1FFF 
                       DUSKIP  POP              {R0-R12}
  219 000000CC BD1F            POP              {R0-R4,PC}
  220 000000CE         
  221 000000CE         
  222 000000CE         
  223 000000CE         ; Your Debug_ElapsedTime is called after every output.
  224 000000CE         ; Input: none 
  225 000000CE         ; Output: none
  226 000000CE         ; - observe the current time as a 32-bit unsigned intege



ARM Macro Assembler    Page 10 


                       r: 
  227 000000CE         ;     NowTime = TIMER2_TAR
  228 000000CE         ; - Starting with the second call you will be able to me
                       asure elapsed time:
  229 000000CE         ;     calcalate ElapsedTime = LastTime-NowTime (down cou
                       nter)
  230 000000CE         ;     determine the Minimum and Maximum ElapsedTime
  231 000000CE         ; - Set LastTime = NowTime (value needed for next call)
  232 000000CE         ; - Stop recording after N calls (N revealed to you in t
                       he UART window)
  233 000000CE         ; save all registers (not just R4-R11)
  234 000000CE         Debug_ElapsedTime
  235 000000CE B51F            PUSH             {R0-R4,LR}
  236 000000D0 E92D 1FFF       PUSH             {R0-R12}
  237 000000D4         
  238 000000D4         ;Check for NTH (N - #time it has bveen called)
  239 000000D4 4830            LDR              R0, =NTH
  240 000000D6 6805            LDR              R5, [R0]    ;Check how many tim
                                                            es it has been call
                                                            ed
  241 000000D8 2D00            CMP              R5, #0      ; Check if it is th
                                                            e first time
  242 000000DA D100            BNE              NOTZ
  243 000000DC         ;If it is the first time, 
  244 000000DC         
  245 000000DC E012            B                DT
  246 000000DE         
  247 000000DE F1B5 06AC 
                       NOTZ    SUBS             R6, R5, #172
  248 000000E2 D20F            BHS              DT          ; if it has been ca
                                                            lled Nth time, skip
                                                             the whole Elapsed 
                                                            Time
  249 000000E4         
  250 000000E4 4833            LDR              R0, =TIMER2_TAR_R ;call the cur
                                                            rent time
  251 000000E6 6801            LDR              R1, [R0]    ;NowTime
  252 000000E8         
  253 000000E8         
  254 000000E8         MIN
  255 000000E8         
  256 000000E8 482D            LDR              R0, =LastTime
  257 000000EA 6803            LDR              R3, [R0]
  258 000000EC 1A5F            SUBS             R7, R3, R1  ; current elapsed t
                                                            ime
  259 000000EE         ;Current minimum time
  260 000000EE 4C2F            LDR              R4, =MinimumTime
  261 000000F0 6825            LDR              R5, [R4]
  262 000000F2         
  263 000000F2         
  264 000000F2         ;if not, compare
  265 000000F2         CALMIN
  266 000000F2 42AF            CMP              R7, R5      ; Current Elapsed -
                                                             Previous min
  267 000000F4 D200            BHS              MAX
  268 000000F6 6027            STR              R7, [R4]    ; if current elapse
                                                            d is smaller, save 
                                                            to Minimum
  269 000000F8         



ARM Macro Assembler    Page 11 


  270 000000F8         
  271 000000F8         ;current elapsed - current, min = current if negative (s
                       kip when positive or equal)
  272 000000F8         
  273 000000F8         ;check if the current time is max ;R7 Current Elapsed, R
                       1 Curren time
  274 000000F8 482B    MAX     LDR              R0, =MaximumTime
  275 000000FA 6805            LDR              R5, [R0]
  276 000000FC 42BD            CMP              R5, R7      ;Current - previous
                                                             max
  277 000000FE         ;max = current if positive (MIN when negative or equal)
  278 000000FE D801            BHI              DT
  279 00000100 6007            STR              R7, [R0]
  280 00000102 E7FF            B                DT
  281 00000104         
  282 00000104 482B    DT      LDR              R0, =TIMER2_TAR_R
  283 00000106 6801            LDR              R1, [R0]
  284 00000108 4825            LDR              R0, =LastTime
  285 0000010A 6001            STR              R1, [R0]    ;Store now time to 
                                                            Last time   
  286 0000010C 4822            LDR              R0, =NTH
  287 0000010E 6805            LDR              R5, [R0]    ;
  288 00000110 F105 0501       ADD              R5, R5, #1  ;Increment NTH by 1
                                                            
  289 00000114 6005            STR              R5,[R0]
  290 00000116         
  291 00000116         ;Save Current time to Previous time
  292 00000116         
  293 00000116 E8BD 1FFF       POP              {R0-R12}
  294 0000011A BD1F            POP              {R0-R4,PC}
  295 0000011C         
  296 0000011C         ; Your Debug_Beat function is called every time through 
                       the main loop to
  297 0000011C         ; indicate to the operator if the main program is runnin
                       g (not stuck or dead).
  298 0000011C         ; Inputs: none
  299 0000011C         ; Outputs: none
  300 0000011C         ; However, slow down the flashing so the LED flashes at 
                       about 1 Hz. goal
  301 0000011C         ; 1Hz means repeating: high for 500ms, low for 500ms
  302 0000011C         ; Basically, toggle an LED every Mth call to your Debug_
                       Beat 
  303 0000011C         ; Find the constant M, so the flashing rate is between 0
                       .5 and 2 Hz. - allowed
  304 0000011C         ; The Port F pin you need to use will be revealed to you
                        in the UART window.
  305 0000011C         ; Save all registers (not AAPCS) 
  306 0000011C         Debug_Beat
  307 0000011C         
  308 0000011C B507            PUSH             {R0-R2,LR}
  309 0000011E E92D 1FFF       PUSH             {R0-R12}
  310 00000122         ;check the counter
  311 00000122 481D            LDR              R0, =NTH
  312 00000124 6801            LDR              R1, [R0]
  313 00000126 F44F 73C8       MOV              R3, #400
  314 0000012A FBB1 F2F3       UDIV             R2, R1, R3  ; R2 is NTH/400
  315 0000012E FB02 1313       MLS              R3, R2, R3, R1 ; R3 is the rema
                                                            inder
  316 00000132 2B00            CMP              R3, #0



ARM Macro Assembler    Page 12 


  317 00000134 D104            BNE              NOBL
  318 00000136         ;every 400th time BEAT it is called, toggle
  319 00000136 4820            LDR              R0, =GPIO_PORTF_DATA_R
  320 00000138 6802            LDR              R2, [R0]
  321 0000013A F082 0202       EOR              R2, R2, #0x02
  322 0000013E 6002            STR              R2, [R0]
  323 00000140         
  324 00000140         ;implement flashing
  325 00000140         NOBL
  326 00000140 E8BD 1FFF       POP              {R0-R12}
  327 00000144 BD07            POP              {R0-R2,PC}
  328 00000146         
  329 00000146         
  330 00000146         
  331 00000146         ;------------Timer2_Init------------
  332 00000146         ; This subroutine is functional and does not need editin
                       g
  333 00000146         ; Initialize Timer2 running at bus clock.
  334 00000146         ; Make it so TIMER2_TAR can be used as a 32-bit time
  335 00000146         ; TIMER2_TAR counts down continuously
  336 00000146         ; Input: none
  337 00000146         ; Output: none
  338 00000146         ; Modifies: R0,R1
  339 00000146         Timer2_Init
  340 00000146 491D            LDR              R1,=SYSCTL_RCGCTIMER_R
  341 00000148 6808            LDR              R0,[R1]
  342 0000014A F040 0004       ORR              R0,R0,#0x04
  343 0000014E 6008            STR              R0,[R1]     ; activate TIMER2
  344 00000150 BF00            NOP
  345 00000152 BF00            NOP
  346 00000154 491A            LDR              R1,=TIMER2_CTL_R
  347 00000156 F04F 0000       MOV              R0,#0x00
  348 0000015A 6008            STR              R0,[R1]     ; disable TIMER2A d
                                                            uring setup
  349 0000015C 4919            LDR              R1,=TIMER2_CFG_R
  350 0000015E 6008            STR              R0,[R1]     ; configure for 32-
                                                            bit mode
  351 00000160 4919            LDR              R1,=TIMER2_TAMR_R
  352 00000162 F04F 0002       MOV              R0,#0x02
  353 00000166 6008            STR              R0,[R1]     ; configure for per
                                                            iodic mode, default
                                                             down-count setting
                                                            s
  354 00000168 4918            LDR              R1,=TIMER2_TAILR_R
  355 0000016A F06F 0001       LDR              R0,=0xFFFFFFFE
  356 0000016E 6008            STR              R0,[R1]     ; reload value
  357 00000170 4917            LDR              R1,=TIMER2_TAPR_R
  358 00000172 F04F 0000       MOV              R0,#0x00
  359 00000176 6008            STR              R0,[R1]     ; no prescale, bus 
                                                            clock resolution
  360 00000178 4916            LDR              R1,=TIMER2_IMR_R
  361 0000017A F04F 0000       MOV              R0,#0x00
  362 0000017E 6008            STR              R0,[R1]     ; no interrupts
  363 00000180 490F            LDR              R1,=TIMER2_CTL_R
  364 00000182 F04F 0001       MOV              R0,#0x01
  365 00000186 6008            STR              R0,[R1]     ; enable TIMER2A
  366 00000188 4770            BX               LR
  367 0000018A         
  368 0000018A 00 00           ALIGN                        ; make sure the end



ARM Macro Assembler    Page 13 


                                                             of this section is
                                                             aligned
  369 0000018C                 END                          ; end of file
              400FE608 
              40025400 
              4002551C 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              40032048 
              400253FC 
              400FE604 
              4003200C 
              40032000 
              40032004 
              40032028 
              40032038 
              40032018 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\debug.d -o.\debug.o -I.\RTE\_Lab4 -IC:\Users\kools\AppData\Local
\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\kools\AppData\Local\Ar
m\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" 
--predefine="__UVISION_VERSION SETA 534" --predefine="_RTE_ SETA 1" --predefine
="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\debug.lst Debug.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 65 in file Debug.s
   Uses
      None
Comment: DATA unused
DumpBuf 00000000

Symbol: DumpBuf
   Definitions
      At line 71 in file Debug.s
   Uses
      At line 67 in file Debug.s
      At line 161 in file Debug.s
      At line 210 in file Debug.s

Histogram 000000C8

Symbol: Histogram
   Definitions
      At line 72 in file Debug.s
   Uses
      At line 68 in file Debug.s
Comment: Histogram used once
LastTime 00000284

Symbol: LastTime
   Definitions
      At line 78 in file Debug.s
   Uses
      At line 139 in file Debug.s
      At line 256 in file Debug.s
      At line 284 in file Debug.s

MaximumTime 0000010C

Symbol: MaximumTime
   Definitions
      At line 74 in file Debug.s
   Uses
      At line 70 in file Debug.s
      At line 149 in file Debug.s
      At line 274 in file Debug.s

MinimumTime 00000108

Symbol: MinimumTime
   Definitions
      At line 73 in file Debug.s
   Uses
      At line 69 in file Debug.s
      At line 154 in file Debug.s
      At line 260 in file Debug.s

NST 000001BC

Symbol: NST



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 77 in file Debug.s
   Uses
      At line 134 in file Debug.s
      At line 195 in file Debug.s

NTH 00000110

Symbol: NTH
   Definitions
      At line 76 in file Debug.s
   Uses
      At line 124 in file Debug.s
      At line 129 in file Debug.s
      At line 239 in file Debug.s
      At line 286 in file Debug.s
      At line 311 in file Debug.s

NowTime 00000288

Symbol: NowTime
   Definitions
      At line 79 in file Debug.s
   Uses
      At line 144 in file Debug.s
Comment: NowTime used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 86 in file Debug.s
   Uses
      None
Comment: .text unused
CALMIN 000000F2

Symbol: CALMIN
   Definitions
      At line 265 in file Debug.s
   Uses
      None
Comment: CALMIN unused
DINI 0000009A

Symbol: DINI
   Definitions
      At line 174 in file Debug.s
   Uses
      At line 166 in file Debug.s
Comment: DINI used once
DT 00000104

Symbol: DT
   Definitions
      At line 282 in file Debug.s
   Uses
      At line 245 in file Debug.s
      At line 248 in file Debug.s
      At line 278 in file Debug.s
      At line 280 in file Debug.s

DUSKIP 000000C8

Symbol: DUSKIP
   Definitions
      At line 218 in file Debug.s
   Uses
      At line 199 in file Debug.s
      At line 208 in file Debug.s

Debug_Beat 0000011C

Symbol: Debug_Beat
   Definitions
      At line 306 in file Debug.s
   Uses
      At line 84 in file Debug.s
Comment: Debug_Beat used once
Debug_Dump 000000A0

Symbol: Debug_Dump
   Definitions
      At line 185 in file Debug.s
   Uses
      At line 82 in file Debug.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: Debug_Dump used once
Debug_ElapsedTime 000000CE

Symbol: Debug_ElapsedTime
   Definitions
      At line 234 in file Debug.s
   Uses
      At line 83 in file Debug.s
Comment: Debug_ElapsedTime used once
Debug_Init 00000010

Symbol: Debug_Init
   Definitions
      At line 100 in file Debug.s
   Uses
      At line 81 in file Debug.s
Comment: Debug_Init used once
EID1 00000000

Symbol: EID1
   Definitions
      At line 89 in file Debug.s
   Uses
      At line 88 in file Debug.s
Comment: EID1 used once
EID2 00000008

Symbol: EID2
   Definitions
      At line 91 in file Debug.s
   Uses
      At line 90 in file Debug.s
Comment: EID2 used once
MAX 000000F8

Symbol: MAX
   Definitions
      At line 274 in file Debug.s
   Uses
      At line 267 in file Debug.s
Comment: MAX used once
MIN 000000E8

Symbol: MIN
   Definitions
      At line 254 in file Debug.s
   Uses
      None
Comment: MIN unused
NOBL 00000140

Symbol: NOBL
   Definitions
      At line 325 in file Debug.s
   Uses
      At line 317 in file Debug.s
Comment: NOBL used once
NOTZ 000000DE




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: NOTZ
   Definitions
      At line 247 in file Debug.s
   Uses
      At line 242 in file Debug.s
Comment: NOTZ used once
NX1 00000088

Symbol: NX1
   Definitions
      At line 162 in file Debug.s
   Uses
      At line 168 in file Debug.s
Comment: NX1 used once
Timer2_Init 00000146

Symbol: Timer2_Init
   Definitions
      At line 339 in file Debug.s
   Uses
      At line 103 in file Debug.s
Comment: Timer2_Init used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 52 in file Debug.s
   Uses
      At line 319 in file Debug.s
Comment: GPIO_PORTF_DATA_R used once
GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 54 in file Debug.s
   Uses
      At line 119 in file Debug.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 53 in file Debug.s
   Uses
      At line 114 in file Debug.s
Comment: GPIO_PORTF_DIR_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 51 in file Debug.s
   Uses
      At line 107 in file Debug.s
Comment: SYSCTL_RCGCGPIO_R used once
SYSCTL_RCGCTIMER_R 400FE604

Symbol: SYSCTL_RCGCTIMER_R
   Definitions
      At line 55 in file Debug.s
   Uses
      At line 340 in file Debug.s
Comment: SYSCTL_RCGCTIMER_R used once
TIMER2_CFG_R 40032000

Symbol: TIMER2_CFG_R
   Definitions
      At line 56 in file Debug.s
   Uses
      At line 349 in file Debug.s
Comment: TIMER2_CFG_R used once
TIMER2_CTL_R 4003200C

Symbol: TIMER2_CTL_R
   Definitions
      At line 58 in file Debug.s
   Uses
      At line 346 in file Debug.s
      At line 363 in file Debug.s

TIMER2_IMR_R 40032018




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: TIMER2_IMR_R
   Definitions
      At line 59 in file Debug.s
   Uses
      At line 360 in file Debug.s
Comment: TIMER2_IMR_R used once
TIMER2_TAILR_R 40032028

Symbol: TIMER2_TAILR_R
   Definitions
      At line 60 in file Debug.s
   Uses
      At line 354 in file Debug.s
Comment: TIMER2_TAILR_R used once
TIMER2_TAMR_R 40032004

Symbol: TIMER2_TAMR_R
   Definitions
      At line 57 in file Debug.s
   Uses
      At line 351 in file Debug.s
Comment: TIMER2_TAMR_R used once
TIMER2_TAPR_R 40032038

Symbol: TIMER2_TAPR_R
   Definitions
      At line 61 in file Debug.s
   Uses
      At line 357 in file Debug.s
Comment: TIMER2_TAPR_R used once
TIMER2_TAR_R 40032048

Symbol: TIMER2_TAR_R
   Definitions
      At line 62 in file Debug.s
   Uses
      At line 250 in file Debug.s
      At line 282 in file Debug.s

12 symbols
374 symbols in table
